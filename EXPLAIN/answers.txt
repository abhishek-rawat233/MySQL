Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?
ANS:
  ID: An identifier for which SELECT statement is being analyzed.
  SELECT_TYPE: Describes type of SELECT statement. The SIMPLE value indicates that the statement doesnâ€™t include subqueries or unions.
  TABLE: The table being analyzed by the row.
  TYPE: The method used to match rows in different tables when the SELECT statement joins two or more tables. If ALL is specified, MySQL conducts a full table scan for each combination of rows from the current table and the joined table. Generally, you should avoid ALL in all but the first row.
  POSSIBLE_KEYS: The indexes that MySQL can use to find rows. If NULL , no indexes can be used.
  KEY: The indexes that MySQL actually uses to return rows.
  KEY_LEN: The length of the index used to retrieve rows. This is most useful in determining how many parts of a multicolumn index are used.
  REF: The column used in conjunction with the index specified in the key column.
  ROWS: The number of rows that MySQL plans to examine in order to execute the query.
  EXTRA: Additional information about the query. For example, if a query can be executed by referring only to the index, the value Using index is displayed.


Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?
ANS: The output value of rows column indicates the number of rows that would be examined to produce the output of query.


2.2 Is the SELECT query optimal? If no, how do we optimize it?
ANS: No, select query isn't optimal however, it few guidelines could be followed to make it more efficient:
  >> Making columns which are used in 'where', 'group by' 'order by' clauses Indexes.
  >> Using joins rather than sub-queries if possible.
  >> Isolating indexed columns in comparison expression


Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order? Ask the exercise creator for a hint if you are confused.
ANS: 'user_id' and 'commentable_id' would be number based indexes and 'commentable_type' would be string based index. Since the indexing works better numrical type the 'user_id' and 'commentable_id' would be preferred choices.


Q4:
4.1 EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?
ANS:
  mysql> EXPLAIN SELECT DISTINCT branch FROM holdings JOIN titles ON holdings.title=titles.title WHERE titles.author = 'Ann Brown';
  +----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------------------------------------+
  | id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                    |
  +----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------------------------------------+
  |  1 | SIMPLE      | titles   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |    20.00 | Using where; Using temporary |
  |  1 | SIMPLE      | holdings | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   10 |    10.00 | Using where; Using join buffer (Block Nested Loop) |
  +----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------------------------------------------+

  id: The value 1 in both rows indicates that first 'select' usage.
  select_type: 'simple' indicates no presence of nested queries and unions.
  table: indicates from where rows were taken from.
  partitions: NULL indicates table used are non-partitioned.
  type: ALL indicates that full table scan is done for each combination of rows from the previous tables.
  possible_keys: NULL indicates absence of relevant indexes.
  key: NULL here indicates MySQL found no index to be used for the query.
  key_len: Since no indexes were used hence the value NULL.
  ref: NULL indicates nothing was used for comparison with index.
  rows: value indicates no. of rows examined.
  filtered: shows the percentage of rows filtered by condition.
  Extra: #Using where: Usage of where clause.
         #Using temporary: indicates usage of temporary table created by MySQL to resolve the query.
         #Using join buffer:Tables from earlier joins are read in portions into the join buffer, and then their rows are used from the buffer to perform the join with the current table.
         #(Block Nested Loop): indicates use of the Block Nested-Loop algorithm.



4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?
ANS:
  mysql> EXPLAIN SELECT DISTINCT branch FROM holdings WHERE title IN ( SELECT title FROM titles WHERE author = 'Ann Brown');
+----+--------------+-------------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------+
| id | select_type  | table       | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                  |
+----+--------------+-------------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------+
|  1 | SIMPLE       | <subquery2> | NULL       | ALL  | NULL          | NULL | NULL    | NULL | NULL |   100.00 | Using temporary                        |
|  1 | SIMPLE       | holdings    | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   10 |    10.00 | Using where; Using join buffer (Block Nested Loop) |
|  2 | MATERIALIZED | titles      | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    5 |    20.00 | Using where                            |
+----+--------------+-------------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------+

id: The value 1 and 2 in both rows indicates that first and second 'select' usage.
select_type: 'SIMPLE' and 'MATERIALIZED' indicates absence and presence of nested queries and unions.
table: indicates from where rows were taken from.
partitions: NULL indicates table used are non-partitioned.
type: ALL indicates that full table scan is done for each combination of rows from the previous tables.
possible_keys: NULL indicates absence of relevant indexes.
key: NULL here indicates MySQL found no index to be used for the query.
key_len: Since no indexes were used hence the value NULL.
ref: NULL indicates nothing was used for comparison with index.
rows: value indicates no. of rows examined.
filtered: shows the percentage of rows filtered by condition.
Extra: #Using where: Usage of where clause.
       #Using temporary: indicates usage of temporary table created by MySQL to resolve the query.
       #Using join buffer:Tables from earlier joins are read in portions into the join buffer, and then their rows are used from the buffer to perform the join with the current table.
       #(Block Nested Loop): indicates use of the Block Nested-Loop algorithm.
